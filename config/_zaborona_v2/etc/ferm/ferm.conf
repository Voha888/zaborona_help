# -*- shell-script -*-
#
#  Configuration file for ferm(1).
#

# connmark 1 = REJECT
# connmark 2 = ACCEPT

# dummy file. Filled by zaboronahelp script.
#@def $WHITELIST = (
@include 'whitelist.conf';
#);

# Block a port to connect (If you try to connect to the specified port/ports from the vpn network, the connection will be blocked).
# This is done to prevent spam, brute force, ddos, ports on remote servers
@include 'blockport.conf';

# We block the connection by line (text string). For example, by the word: BitTorrent
@include 'blockstring.conf';

@def $WAN_4 = ens3;
@def $WAN_6 = ens3;

@def $VPN = (zaborona+ wg+ wghub+ ppp+);

@def $DNSMAP_RANGE = 10.224.0.0/15;

@def $VPN_ADDR_4_01 = 192.168.224.0/22;
@def $VPN_ADDR_4_02 = 192.168.228.0/22;
@def $VPN_ADDR_4_03 = 192.168.232.0/22;
@def $VPN_ADDR_4_04 = 192.168.236.0/22;
@def $VPN_ADDR_4_05 = 192.168.240.0/22;
@def $VPN_ADDR_4_06 = 192.168.244.0/22;
@def $VPN_ADDR_4_07 = 192.168.248.0/22;
@def $VPN_ADDR_4_08 = 192.168.252.0/22;
@def $VPN_ADDR_4_09 = 192.168.220.0/22;
@def $VPN_ADDR_4_10 = 192.168.216.0/22;
@def $VPN_ADDR_4_11 = 192.168.212.0/22;
@def $VPN_ADDR_4_12 = 192.168.208.0/22;
@def $VPN_ADDR_4_13 = 192.168.112.0/22;
@def $VPN_ADDR_4_14 = 192.168.111.0/24;
@def $VPN_ADDR_4_15 = 192.168.204.0/22;
@def $VPN_ADDR_4_16 = 192.168.17.0/24;
@def $VPN_ADDR_4_17 = 192.168.16.0/24;
@def $VPN_ADDR_4_18 = 192.168.15.0/24;

@def $VPN_ADDR_4_DNS01 = 192.168.224.1/32;
@def $VPN_ADDR_4_DNS02 = 192.168.228.1/32;
@def $VPN_ADDR_4_DNS03 = 192.168.232.1/32;
@def $VPN_ADDR_4_DNS04 = 192.168.236.1/32;
@def $VPN_ADDR_4_DNS05 = 192.168.240.1/32;
@def $VPN_ADDR_4_DNS06 = 192.168.244.1/32;
@def $VPN_ADDR_4_DNS07 = 192.168.248.1/32;
@def $VPN_ADDR_4_DNS08 = 192.168.252.1/32;
@def $VPN_ADDR_4_DNS09 = 192.168.220.1/32;
@def $VPN_ADDR_4_DNS10 = 192.168.216.1/32;
@def $VPN_ADDR_4_DNS11 = 192.168.212.1/32;
@def $VPN_ADDR_4_DNS12 = 192.168.208.1/32;
@def $VPN_ADDR_4_DNS13 = 192.168.112.1/32;
@def $VPN_ADDR_4_DNS14 = 192.168.111.1/32;
@def $VPN_ADDR_4_DNS15 = 192.168.204.1/32;
@def $VPN_ADDR_4_DNS16 = 192.168.17.1/32;
@def $VPN_ADDR_4_DNS17 = 192.168.16.1/32;
@def $VPN_ADDR_4_DNS18 = 192.168.15.1/32;

table filter {
		chain ZABORONA_V4 {
		daddr $ALLOWED_NETWORKS_V4 ACCEPT;
	}
		chain INPUT {
		proto gre ACCEPT;
		proto esp ACCEPT;
		proto udp dport 500 ACCEPT;
		proto tcp dport 500 ACCEPT;
		proto udp dport 4500 ACCEPT;
		proto udp dport 1701 ACCEPT;
		proto tcp dport 1723 ACCEPT;
	}

	chain FORWARD {
		#policy DROP;
#		interface $VPN outerface $WAN_4 protocol (tcp udp) dport $BLOCKPORT DROP;
#		interface $VPN outerface $WAN_4 protocol (tcp udp) mod string algo bm to 65535 string $BLOCKSTRING DROP;
		mod conntrack ctstate (ESTABLISHED RELATED DNAT) ACCEPT;
		#mod conntrack ctstate INVALID DROP;
		#if $WAN_4 of $VPN mod conntrack ctstate (ESTABLISHED RELATED) ACCEPT;
		#
		outerface $VPN proto tcp tcp-flags (SYN RST) SYN TCPMSS clamp-mss-to-pmtu;
		#outerface $VPN proto tcp tcp-flags (SYN RST) SYN TCPMSS set-mss FOO;
		#

		# ACCEPT marked "invalid" packet if it's for zapret set
		interface $VPN mod connmark mark 1 jump ZABORONA_V4;
		interface $VPN mod connmark mark 1 REJECT;

		interface $VPN outerface $WAN_4 ACCEPT;

		proto gre ACCEPT;
		proto esp ACCEPT;
		REJECT;
	}
}

table nat {
	chain dnsmap {}
	chain dnsmaptor {}
	chain dnsmapi2p {}
	chain dnsmaptld {}
	chain PREROUTING {
		# Балансировка меджду демонами OpenVPN (если два и более ядер CPU)
		#if $WAN_4 protocol tcp dport 1194 mod conntrack ctstate NEW mod statistic mode random probability 0.50000000000 REDIRECT to-ports 1195;
		#if $WAN_4 protocol tcp dport 1196 mod conntrack ctstate NEW mod statistic mode random probability 0.50000000000 REDIRECT to-ports 1197;
		#if $WAN_4 protocol udp dport 1194 mod conntrack ctstate NEW mod statistic mode random probability 0.50000000000 REDIRECT to-ports 1195;
		#if $WAN_4 protocol udp dport 1196 mod conntrack ctstate NEW mod statistic mode random probability 0.50000000000 REDIRECT to-ports 1197;

		# DNS redirection
		saddr $VPN_ADDR_4_01 daddr ! $VPN_ADDR_4_DNS01 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_02 daddr ! $VPN_ADDR_4_DNS02 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_03 daddr ! $VPN_ADDR_4_DNS03 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_04 daddr ! $VPN_ADDR_4_DNS04 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_05 daddr ! $VPN_ADDR_4_DNS05 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_06 daddr ! $VPN_ADDR_4_DNS06 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_07 daddr ! $VPN_ADDR_4_DNS07 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_08 daddr ! $VPN_ADDR_4_DNS08 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_09 daddr ! $VPN_ADDR_4_DNS09 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_10 daddr ! $VPN_ADDR_4_DNS10 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_11 daddr ! $VPN_ADDR_4_DNS11 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_12 daddr ! $VPN_ADDR_4_DNS12 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_13 daddr ! $VPN_ADDR_4_DNS13 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_14 daddr ! $VPN_ADDR_4_DNS14 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_15 daddr ! $VPN_ADDR_4_DNS15 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_16 daddr ! $VPN_ADDR_4_DNS16 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_17 daddr ! $VPN_ADDR_4_DNS17 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPN_ADDR_4_18 daddr ! $VPN_ADDR_4_DNS18 proto (tcp udp) dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;

		# Перенаправление DNS запросов на локальный сервер dnsmasq
		#saddr 192.168.224.0/22 {
		#	protocol udp dport 53 REDIRECT;
		#	protocol tcp dport 53 REDIRECT;
		#}

		# dnsmap
		saddr $VPN_ADDR_4_01 daddr $VPN_ADDR_4_DNS01 ACCEPT;
		saddr $VPN_ADDR_4_02 daddr $VPN_ADDR_4_DNS02 ACCEPT;
		saddr $VPN_ADDR_4_03 daddr $VPN_ADDR_4_DNS03 ACCEPT;
		saddr $VPN_ADDR_4_04 daddr $VPN_ADDR_4_DNS04 ACCEPT;
		saddr $VPN_ADDR_4_05 daddr $VPN_ADDR_4_DNS05 ACCEPT;
		saddr $VPN_ADDR_4_06 daddr $VPN_ADDR_4_DNS06 ACCEPT;
		saddr $VPN_ADDR_4_07 daddr $VPN_ADDR_4_DNS07 ACCEPT;
		saddr $VPN_ADDR_4_08 daddr $VPN_ADDR_4_DNS08 ACCEPT;
		saddr $VPN_ADDR_4_09 daddr $VPN_ADDR_4_DNS09 ACCEPT;
		saddr $VPN_ADDR_4_10 daddr $VPN_ADDR_4_DNS10 ACCEPT;
		saddr $VPN_ADDR_4_11 daddr $VPN_ADDR_4_DNS11 ACCEPT;
		saddr $VPN_ADDR_4_12 daddr $VPN_ADDR_4_DNS12 ACCEPT;
		saddr $VPN_ADDR_4_13 daddr $VPN_ADDR_4_DNS13 ACCEPT;
		saddr $VPN_ADDR_4_14 daddr $VPN_ADDR_4_DNS14 ACCEPT;
		saddr $VPN_ADDR_4_15 daddr $VPN_ADDR_4_DNS15 ACCEPT;
		saddr $VPN_ADDR_4_16 daddr $VPN_ADDR_4_DNS16 ACCEPT;
		saddr $VPN_ADDR_4_17 daddr $VPN_ADDR_4_DNS17 ACCEPT;
		saddr $VPN_ADDR_4_18 daddr $VPN_ADDR_4_DNS18 ACCEPT;

		saddr $VPN_ADDR_4_01 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_02 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_03 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_04 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_05 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_06 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_07 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_08 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_09 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_10 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_11 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_12 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_13 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_14 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_15 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_16 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_17 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_18 daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr $VPN_ADDR_4_01 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_02 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_03 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_04 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_05 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_06 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_07 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_08 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_09 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_10 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_11 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_12 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_13 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_14 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_15 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_16 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_17 daddr $DNSMAP_RANGE jump dnsmap;
		saddr $VPN_ADDR_4_18 daddr $DNSMAP_RANGE jump dnsmap;
	}
	chain POSTROUTING {
		saddr $VPN_ADDR_4_01 MASQUERADE;
		saddr $VPN_ADDR_4_02 MASQUERADE;
		saddr $VPN_ADDR_4_03 MASQUERADE;
		saddr $VPN_ADDR_4_04 MASQUERADE;
		saddr $VPN_ADDR_4_05 MASQUERADE;
		saddr $VPN_ADDR_4_06 MASQUERADE;
		saddr $VPN_ADDR_4_07 MASQUERADE;
		saddr $VPN_ADDR_4_08 MASQUERADE;
		saddr $VPN_ADDR_4_09 MASQUERADE;
		saddr $VPN_ADDR_4_10 MASQUERADE;
		saddr $VPN_ADDR_4_11 MASQUERADE;
		saddr $VPN_ADDR_4_12 MASQUERADE;
		saddr $VPN_ADDR_4_13 MASQUERADE;
		saddr $VPN_ADDR_4_14 MASQUERADE;
		saddr $VPN_ADDR_4_15 MASQUERADE;
		saddr $VPN_ADDR_4_16 MASQUERADE;
		saddr $VPN_ADDR_4_17 MASQUERADE;
		saddr $VPN_ADDR_4_18 MASQUERADE;
	}
}

#table mangle {
#	chain POSTROUTING {
#		#interface $VPN outerface $WAN_4 protocol (tcp udp) dport $BLOCKPORT LOG log-prefix ' IP address tried to connect to blocked ports!';
#		interface $VPN outerface $WAN_4 protocol (tcp udp) dport $BLOCKPORT DROP;
#		interface $VPN outerface $WAN_4 protocol (tcp udp) mod string algo bm to 65535 string $BLOCKSTRING DROP;
#	}
#}

# IPv6:
#domain ip6 {
#    table filter {
#        chain INPUT {
#            policy ACCEPT;
#            # ...
#        }
#        # ...
#    }
#}
