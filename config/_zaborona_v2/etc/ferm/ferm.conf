# -*- shell-script -*-
#
#  Configuration file for ferm(1).
#

# connmark 1 = REJECT
# connmark 2 = ACCEPT

# dummy file. Filled by zaboronahelp script.
#@def $WHITELIST = (
@include 'whitelist.conf';
#);

# Block a port to connect (If you try to connect to the specified port/ports from the vpn network, the connection will be blocked).
# This is done to prevent spam, brute force, ddos, ports on remote servers
@include 'blockport.conf';

# We block the connection by line (text string). For example, by the word: BitTorrent
@include 'blockstring.conf';

@def $VPNUDP_RANGE = 192.168.100.0/22;
@def $VPNUDP_DNS   = 192.168.100.1/32;
@def $VPNTCP_RANGE = 192.168.104.0/22;
@def $VPNTCP_DNS   = 192.168.104.1/32;

@def $VPN = (zaborona+ wg+ wghub+ ppp+);

@def $DNSMAP_RANGE = 10.224.0.0/15;

@def $EXT_INTERFACE = (host0 eth0);

@def $WAN_4 = eth0;
@def $WAN_6 = eth0;

@def $VPN_ADDR_4 = (
192.168.224.0/22
192.168.228.0/22
192.168.232.0/22
192.168.236.0/22
192.168.240.0/22
192.168.244.0/22
192.168.248.0/22
192.168.252.0/22
192.168.220.0/22
192.168.216.0/22
192.168.212.0/22
192.168.208.0/22
192.168.112.0/22
192.168.111.0/24
192.168.204.0/22
192.168.112.0/22
192.168.17.0/24
192.168.16.0/24
192.168.15.0/24
);

@def $VPN_INTERFACE = (vpn+ zaborona+);

table filter {
#		chain zbrnhlpvpnwhitelist {
#		daddr $WHITELIST ACCEPT;
#	}

		chain ZABORONA_V4 {
		daddr $ALLOWED_NETWORKS_V4 ACCEPT;
	}
		proto gre ACCEPT;
		proto esp ACCEPT;
		proto udp dport 500 ACCEPT;
		proto tcp dport 500 ACCEPT;
		proto udp dport 4500 ACCEPT;
		proto udp dport 1701 ACCEPT;
		proto tcp dport 1723 ACCEPT;

	chain FORWARD {
		mod conntrack ctstate (ESTABLISHED RELATED DNAT) ACCEPT;
		#
		outerface $VPN_INTERFACE proto tcp tcp-flags (SYN RST) SYN TCPMSS clamp-mss-to-pmtu;
		#outerface $VPN_INTERFACE proto tcp tcp-flags (SYN RST) SYN TCPMSS set-mss FOO;
		#

		# ACCEPT marked "invalid" packet if it's for zapret set
		interface $VPN_INTERFACE mod connmark mark 1 jump zbrnhlpvpnwhitelist;
		interface $VPN_INTERFACE mod connmark mark 1 REJECT;

		interface $VPN_INTERFACE outerface $EXT_INTERFACE ACCEPT;

		proto gre ACCEPT;
		proto esp ACCEPT;
		REJECT;
	}
}

table nat {
	chain dnsmap {}
	chain PREROUTING {
		# DNS redirection
		saddr $VPNUDP_RANGE daddr ! $VPNUDP_DNS proto udp dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;
		saddr $VPNTCP_RANGE daddr ! $VPNTCP_DNS proto udp dport 53 mod u32 u32 '0x1C & 0xFFCF = 0x0100 && 0x1E & 0xFFFF = 0x0001' REDIRECT to-ports 53;

		# dnsmap
		saddr $VPNUDP_RANGE daddr $VPNUDP_DNS ACCEPT;
		saddr $VPNTCP_RANGE daddr $VPNTCP_DNS ACCEPT;

		saddr ($VPNUDP_RANGE $VPNTCP_RANGE) daddr ! $DNSMAP_RANGE CONNMARK set-mark 1;
		saddr ($VPNUDP_RANGE $VPNTCP_RANGE) daddr $DNSMAP_RANGE jump dnsmap;
	}
	chain POSTROUTING {
		saddr ($VPNUDP_RANGE $VPNTCP_RANGE) MASQUERADE;
	}
}

table mangle {
	chain POSTROUTING {
#		interface $VPN_INTERFACE outerface $EXT_INTERFACE protocol (tcp udp) dport $BLOCKPORT LOG log-prefix ' IP address tried to connect to blocked ports!';
		interface $VPN_INTERFACE outerface $EXT_INTERFACE protocol (tcp udp) dport $BLOCKPORT DROP;
		interface $VPN_INTERFACE outerface $EXT_INTERFACE protocol (tcp udp) mod string string "$BLOCKSTRING" DROP;
	}
}

# IPv6:
#domain ip6 {
#    table filter {
#        chain INPUT {
#            policy ACCEPT;
#            # ...
#        }
#        # ...
#    }
#}
